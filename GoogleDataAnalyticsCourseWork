--Find out what routes are more popular with different user types.

SELECT 
    usertype,
    CONCAT(start_station_name," to ", end_station_name) AS Route,
    COUNT(*) AS num_trips,
    ROUND(AVG(CAST(tripduration as int64)/60),2) AS Duration
FROM `bigquery-public-data.new_york_citibike.citibike_trips` 
GROUP BY
    start_station_name, end_station_name, usertype
ORDER BY
    num_trips DESC
LIMIT 10



--Practicing different JOINs--
--Work on using Aliases to make queries more readable--
SELECT `bigquery-public-data.world_bank_intl_education.international_education`.country_name,
    `bigquery-public-data.world_bank_intl_education.country_summary`.country_code,
    `bigquery-public-data.world_bank_intl_education.international_education`.value
FROM `bigquery-public-data.world_bank_intl_education.international_education`
INNER JOIN `bigquery-public-data.world_bank_intl_education.country_summary`
ON `bigquery-public-data.world_bank_intl_education.country_summary`.country_code = `bigquery-public-data.world_bank_intl_education.international_education`.country_code


SELECT
    edu.country_name,
    SUMMARY.country_code,
    edu.value
FROM
    'bigquery-public-data.world_bank_intl_education.international_education' AS edu
INNER JOIN
    'bigquery-public-data.world_bank_intl_education.country_summary' AS summary
ON edu.country_code = summary.country_code


SELECT
    edu.country_name,
    summary.country_code,
    edu.value
FROM
    `bigquery-public-data.world_bank_intl_education.international_education` AS edu
OUTER JOIN
    `bigquery-public-data.world_bank_intl_education.country_summary` AS summary
ON edu.country_code = summary.country_code



--Answer question: In 2015, how many people were of the official age for secondary age broken down by region of the world?--
SELECT
summary.region,
SUM(edu.value) secondary_edu_population
FROM
    `bigquery-public-data.world_bank_intl_education.international_education` AS edu
INNER JOIN
    `bigquery-public-data.world_bank_intl_education.country_summary` AS summary
ON edu.country_code = summary.country_code --country_code is our key
    WHERE summary.region IS NOT NULL
    AND edu.indicator_name = 'Population of the official age for secondary education, both sexes (number)'
    AND edu.year = 2015
GROUP BY summary.region
ORDER BY secondary_edu_population DESC



--Answer question: Which Division 1 mascots were the winningest in NCAA Basketball in the 1990s?--
SELECT
 seasons.market AS university,
 seasons.name AS team_name,
 mascots.mascot AS team_mascot,
 AVG(seasons.wins) AS avg_wins,
 AVG(seasons.losses) AS avg_losses,
 AVG(seasons.ties) AS avg_ties
FROM `bigquery-public-data.ncaa_basketball.mbb_historical_teams_seasons` AS seasons
JOIN `bigquery-public-data.ncaa_basketball.mascots` AS mascots
ON seasons.team_id = mascots.id
WHERE seasons.season BETWEEN 1990 AND 1999
 AND seasons.division = 1
 GROUP BY 1,2,3
ORDER BY avg_wins DESC, university



--Report on distribution of orders by state--
SELECT 
  orders.*,
  warehouse.warehouse_alias,
  warehouse.state
FROM
  `t-gateway-378303.warehouse_orders.orders` AS orders
JOIN
  `t-gateway-378303.warehouse_orders.warehouse` as warehouse
ON orders.warehouse_id = warehouse.warehouse_id



--Count the number of states included in the ordered data--
SELECT 
  COUNT(warehouse.state) as num_states
FROM
  `t-gateway-378303.warehouse_orders.orders` AS orders
JOIN
  `t-gateway-378303.warehouse_orders.warehouse` as warehouse
ON orders.warehouse_id = warehouse.warehouse_id



--Count the number of states included in the ordered data, remove duplicates and null values--
SELECT 
  COUNT(DISTINCT warehouse.state) as num_states
FROM
  `t-gateway-378303.warehouse_orders.orders` AS orders
JOIN
  `t-gateway-378303.warehouse_orders.warehouse` as warehouse
ON orders.warehouse_id = warehouse.warehouse_id



--Group number of distinct orders per state--
SELECT 
  state,
  COUNT(DISTINCT order_id) as num_orders
FROM
  `t-gateway-378303.warehouse_orders.orders` AS orders
JOIN
  `t-gateway-378303.warehouse_orders.warehouse` as warehouse
ON orders.warehouse_id = warehouse.warehouse_id
GROUP BY 
  warehouse.state



--Practice Subqueries--
--compare the number of bikes available at a particular station to the overall average number of bikes available at all stations. Example subquery from the SELECT statement--
SELECT
  station_id,
  num_bikes_available,
  (SELECT
    AVG(num_bikes_available)
  FROM `bigquery-public-data.new_york.citibike_stations`) as avg_num_bikes_available
FROM `bigquery-public-data.new_york.citibike_stations`;



--Subquery from the FROM statement. Calculate the total number of rides that started at each station.--
SELECT 
	station_id,
	name,
	number_of_rides AS number_of_rides_starting_at_station
FROM
	(
		SELECT
			CAST(start_station_id AS STRING) AS start_station_id_str, #**
			COUNT(*) AS number_of_rides
		FROM 
      		bigquery-public-data.new_york.citibike_trips
		GROUP BY 
			CAST(start_station_id AS STRING) #**
	)
	AS station_num_trips
	INNER JOIN 
		bigquery-public-data.new_york.citibike_stations 
	ON 
		station_id = start_station_id_str #**
	ORDER BY 
		number_of_rides DESC;



--Subqueries from the WHERE statement. What stations were used only by subscribers?--
SELECT
	station_id,
	name
FROM
	bigquery-public-data.new_york.citibike_stations
WHERE
	station_id IN
	(
		SELECT
			CAST(start_station_id AS STRING) AS start_station_id_str #**
		FROM
	    	bigquery-public-data.new_york.citibike_trips
	  	WHERE
			usertype = 'Subscriber'
  	);


--Subqueries to aggregate data. Example is trying to see which warehouses are delivering the most orders.--

SELECT
  Warehouse.warehouse_id,
  CONCAT(Warehouse.state, ':', Warehouse.warehouse_alias) AS warehouse_name,
  COUNT(Orders.order_id) AS number_of_orders,
  (SELECT COUNT(*) FROM t-gateway-378303.warehouse_orders.orders AS Orders) AS total_orders,
  CASE
    WHEN COUNT(Orders.order_id)/(SELECT COUNT(*) FROM t-gateway-378303.warehouse_orders.orders AS Orders) <= 0.20
    THEN 'Fulfilled 0-20% of Orders'
    WHEN COUNT(Orders.order_id)/(SELECT COUNT(*) FROM t-gateway-378303.warehouse_orders.orders AS Orders) > 0.20
    AND COUNT(Orders.order_id)/(SELECT COUNT(*) FROM t-gateway-378303.warehouse_orders.orders AS Orders) <= 0.60
    THEN 'Fulfilled 21-60% of Orders'
    ELSE 'Fulfilled more than 60% of Orders'
  END AS fulfillment_summary
FROM
  t-gateway-378303.warehouse_orders.warehouse AS Warehouse
LEFT JOIN
  t-gateway-378303.warehouse_orders.orders AS Orders
  ON Orders.warehouse_id = Warehouse.warehouse_id
GROUP BY
  warehouse.warehouse_id,
  warehouse_name
HAVING
  COUNT(Orders.order_id) > 0


-- Work on calculations within a SQL Query. Switched to leading commas to help with readability and error prevention--
--Calculation is to confirm Total_Bags column is actually the total quantity from the small, large and XL columns--

SELECT 
    Date
  , region
  , Small_Bags
  , Large_Bags
  , XLarge_Bags
  , Total_Bags
  , Small_Bags + Large_Bags + XLarge_Bags AS Total_Bags_Calc

FROM 
  `t-gateway-378303.avocado_data.avocado_prices`



--Calculation is to find the percentage of total bags sold that were small bags--

SELECT 
    Date
  , region
  , Total_Bags
  , Small_Bags
  , (Small_Bags / Total_Bags) * 100 AS Small_Bags_Percent

FROM 
  `t-gateway-378303.avocado_data.avocado_prices`

WHERE
  Total_Bags <> 0
